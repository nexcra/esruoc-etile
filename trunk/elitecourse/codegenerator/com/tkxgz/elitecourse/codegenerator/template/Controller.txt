package com.tkxgz.elitecourse.controller;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Map;
import com.tkxgz.elitecourse.core.constant.CommonConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.tkxgz.elitecourse.bean.Log;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.tkxgz.elitecourse.bean.@upperBeanName@;
import com.tkxgz.elitecourse.core.page.Page;
import com.tkxgz.elitecourse.core.util.BeanUtil;
import com.tkxgz.elitecourse.core.util.PageUtil;
import com.tkxgz.elitecourse.service.@upperBeanName@Service;
import com.tkxgz.elitecourse.bean.User;
import com.tkxgz.elitecourse.service.UserService;
import com.tkxgz.elitecourse.service.LogService;
@referenceImport@


/**
 * @tableDescription@Controller类
 * 
 * @author Soyi Yao
 */
@Controller(value = "/admin/@lowerBeanName@.do")
public class @upperBeanName@Controller {

	private static final String MODULE_NAME = "@tableDescription@管理";
	
	Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private LogService logService;
	
	@Autowired
	private @upperBeanName@Service @lowerBeanName@Service;
	
	@userService@

	@referenceServiceForController@

	/**
	 * 默认action
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param currentPageNum
	 * @return
	 */
	@RequestMapping
	public String defaultAction(HttpServletRequest request,
			String currentPageNum) {

		return this.list@upperBeanName@(request, currentPageNum);
	}

	/**
	 * 查询@tableDescription@列表
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param currentPageNum
	 * @return
	 */
	@RequestMapping(params = "action=list@upperBeanName@")
	public String list@upperBeanName@(HttpServletRequest request, String currentPageNum) {

		Page page = new Page();
		page = new Page(PageUtil.getPageNum(currentPageNum));

		this.@lowerBeanName@Service.list@upperBeanName@(page);

		request.setAttribute("page", page);
		
		@referenceListSetting@

		return "/admin/@lowerBeanName@/list@upperBeanName@.jsp";
	}

	/**
	 * 转到新增@tableDescription@页
	 * 
	 * @author Soyi Yao
	 * @return
	 */

	@RequestMapping(params = "action=toAdd@upperBeanName@")
	public String toAdd@upperBeanName@(HttpServletRequest request) {
		
		@referenceListSetting@
		
		return "/admin/@lowerBeanName@/add@upperBeanName@.jsp";
	}

	/**
	 * 新增@tableDescription@
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(params = "action=add@upperBeanName@")
	public String add@upperBeanName@(HttpServletRequest request) throws Exception {
		
		// 获取操作管理员信息
		User admin = (User) request.getSession().getAttribute("admin");
		admin = this.userService.findUserById(admin.getId());
		
		String result = "redirect:/admin/@lowerBeanName@.do?action=list@upperBeanName@";

		// 获取表单参数
		@upperBeanName@ @lowerBeanName@ = new @upperBeanName@();
		BeanUtil.populate(@lowerBeanName@, request.getParameterMap());
		
		
		@createUserInformationAdding@

		int affectedRows = this.@lowerBeanName@Service.add@upperBeanName@(@lowerBeanName@);// 新增

		// 新增失败处理
		if (affectedRows < 1) {
			request.setAttribute("error", "新增不成功，请检查");
			return this.toAdd@upperBeanName@(request);
		}
		
		Log log = new Log();
		log.setModule(MODULE_NAME);
		log.setUserId(admin.getId());
		log.setUserName(admin.getName());
		log.setLogType(CommonConstants.LOG_TYPE_INSERT);
		log.setIpAddress(request.getRemoteAddr());
		log.setDescription("添加@tableDescription@");

		this.logService.addLog(log);
		
		return result;
	}

	/**
	 * 删除@tableDescription@
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param response
	 * @param id
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(params = "action=delete@upperBeanName@")
	public String delete@upperBeanName@(HttpServletRequest request,
			HttpServletResponse response, String id) throws Exception {

		// 获取操作管理员信息
		User admin = (User) request.getSession().getAttribute("admin");
		admin = this.userService.findUserById(admin.getId());
		
		// 获取需要删除的id数组
		String[] ids = id.split(",");

		// 批量删除
		int result = this.@lowerBeanName@Service.batchDelete@upperBeanName@(ids);

		response.getWriter().write(" 成功删除 " + result + "条记录");
		
	
		
		Log log = new Log();
		log.setModule(MODULE_NAME);
		log.setUserId(admin.getId());
		log.setUserName(admin.getName());
		log.setLogType(CommonConstants.LOG_TYPE_DELETE);
		log.setIpAddress(request.getRemoteAddr());
		log.setDescription("删除@tableDescription@");

		this.logService.addLog(log);
		return null;
	}

	/**
	 * 转到修改@tableDescription@页
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping(params = "action=toUpdate@upperBeanName@")
	public String toUpdate@upperBeanName@(HttpServletRequest request, String id) {

		Map map = this.@lowerBeanName@Service.get@upperBeanName@ById(id);

		request.setAttribute("map", map);
		
		@referenceListSetting@

		return "/admin/@lowerBeanName@/update@upperBeanName@.jsp";
	}

	/**
	 * 修改@tableDescription@
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param id
	 * @param name
	 * @param password
	 * @return
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 */
	@RequestMapping(params = "action=update@upperBeanName@")
	public String update@upperBeanName@(HttpServletRequest request, String id) throws Exception {

		// 获取操作管理员信息
		User admin = (User) request.getSession().getAttribute("admin");
		admin = this.userService.findUserById(admin.getId());
		
		String result = "redirect:/admin/@lowerBeanName@.do?action=list@upperBeanName@";

		// 根据id查询数据库详细，然后根据所修改的字段进行更改，最后保存修改的值
		@upperBeanName@ @lowerBeanName@ = this.@lowerBeanName@Service.find@upperBeanName@ById(id);
		BeanUtil.populate(@lowerBeanName@, request.getParameterMap());

		@createUserInformationUpdating@
		
		int affectedRows = this.@lowerBeanName@Service.update@upperBeanName@(@lowerBeanName@);// 修改

		// 修改失败处理
		if (affectedRows < 1) {
			request.setAttribute("error", "修改不成功，请检查");
			return this.toAdd@upperBeanName@(request);
		}
		
		Log log = new Log();
		log.setModule(MODULE_NAME);
		log.setUserId(admin.getId());
		log.setUserName(admin.getName());
		log.setLogType(CommonConstants.LOG_TYPE_UPDATE);
		log.setIpAddress(request.getRemoteAddr());
		log.setDescription("修改@tableDescription@");

		this.logService.addLog(log);

		return result;
	}

	/**
	 * 查看@tableDescription@
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping(params = "action=view@upperBeanName@")
	public String view@upperBeanName@(HttpServletRequest request, String id) {

		Map map = this.@lowerBeanName@Service.get@upperBeanName@ById(id);

		request.setAttribute("map", map);

		return "/admin/@lowerBeanName@/view@upperBeanName@.jsp";
	}

	/**
	 * 分页搜索@tableDescription@列表
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param currentPageNum
	 * @return
	 * @throws IllegalAccessException
	 * @throws InvocationTargetException
	 */
	@RequestMapping(params = "action=search@upperBeanName@")
	public String search@upperBeanName@(HttpServletRequest request, String currentPageNum)
			throws IllegalAccessException, InvocationTargetException {

		@upperBeanName@ @lowerBeanName@ = new @upperBeanName@();
		BeanUtil.populate(@lowerBeanName@, request.getParameterMap());

		Page page = new Page();
		page = new Page(PageUtil.getPageNum(currentPageNum));

		this.@lowerBeanName@Service.search@upperBeanName@(page, @lowerBeanName@);
		
		@referenceListSetting@
		
		request.setAttribute("page", page);
		request.setAttribute("bean", @lowerBeanName@);

		return "/admin/@lowerBeanName@/list@upperBeanName@.jsp";
	}
	
	/**
	 * 导出@tableDescription@数据
	 * 
	 * @author Soyi Yao
	 * @param request
	 * @param response
	 * @return
	 * @throws IllegalAccessException
	 * @throws InvocationTargetException
	 * @throws IOException
	 */
	@RequestMapping(params = "action=export@upperBeanName@List")
	public String export@upperBeanName@List(HttpServletRequest request,
			HttpServletResponse response) throws IllegalAccessException,
			InvocationTargetException, IOException {
			
		// 查询需要@tableDescription@的@tableDescription@列表
		@upperBeanName@ @lowerBeanName@ = new @upperBeanName@();
		BeanUtil.populate(@lowerBeanName@, request.getParameterMap());
		List<@upperBeanName@> excelContent = this.@lowerBeanName@Service.search@upperBeanName@ForList(@lowerBeanName@);

		String[] columnNames = new String[] { @columnNamesArray@};

		String titleName = "@lowerBeanName@List.xls";// 不创建说明;
		String sheetName = "@tableDescription@列表";

		OutputStream outputStream = response.getOutputStream();
		response.setHeader("Content-Disposition", "attachment; filename="
				+ new String(titleName.getBytes(CommonConstants.CHARACTER_GBK),
						CommonConstants.CHARACTER_ISO8859));
		this.@lowerBeanName@Service.export@upperBeanName@List(request, excelContent, columnNames,
				sheetName, outputStream);

		return null;
	}
	

}
